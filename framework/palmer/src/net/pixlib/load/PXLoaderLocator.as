/* * Copyright the original author or authors. *  * Licensed under the MOZILLA PUBLIC LICENSE, Version 1.1 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.mozilla.org/MPL/MPL-1.1.html *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package net.pixlib.load{	import net.pixlib.core.PXAbstractLocator;	import net.pixlib.core.PXLocatorEvent;	import net.pixlib.exceptions.PXNoSuchElementException;		use namespace pixlib_GraphicLoader;		use namespace pixlib_FileLoader;		use namespace pixlib_StreamLoader;		use namespace pixlib_XMLLoader;		use namespace pixlib_PluginLoader;		use namespace pixlib_CSSLoader;	/**	 *  Dispatched when loader is registered in 	 *  <code>PXLoaderLocator</code> locator.	 *  	 *  @eventType net.pixlib.load.PXLoaderLocatorEvent.onRegisterLoaderEVENT	 */	[Event(name="onRegisterLoader", type="net.pixlib.load.PXLoaderLocatorEvent")]	/**	 *  Dispatched when loader is unregistered from 	 *  <code>PXLoaderLocator</code> locator.	 *  	 *  @eventType net.pixlib.load.PXLoaderLocatorEvent.onUnregisterLoaderEVENT	 */	[Event(name="onUnregisterLoader", type="net.pixlib.load.PXLoaderLocatorEvent")]	/**	 * The PXLoaderLoacator store and register <code>PXLoader</code> objects.	 * 	 * @example 	 * <listing>	 * 	 * public function loadFile( ) : void	 * {	 * 	var loader : PXGraphicLoader = new PXGraphicLoader( );	 * 	loader.name = "MyLogo";	 * 	loader.load( new URLRequest( "logo.jpg" ) );	 * }	 * 	 * public function genericAccess( ) : void	 * {	 * 	var loader : PXLoader = PXLoaderLocator.getInstance().getLoader( "myLogo" );	 * }	 * 	 * public function typedAccess( ) :void	 * {	 * 	var logo : DisplayObject = PXLoaderLocator.getInstance().pixlib_GraphicLoader::getLoader( "MyLogo" ).getView();	 * }	 * </listing>	 * 	 * @see PXLoader	 * 	 * @langversion 3.0	 * @playerversion Flash 10	 * 	 * @author 	Romain Ecarnot	 */	public class PXLoaderLocator extends PXAbstractLocator	{		//--------------------------------------------------------------------		// Private properties		//--------------------------------------------------------------------		private static var _oI : PXLoaderLocator = null;				//--------------------------------------------------------------------		// Public API		//--------------------------------------------------------------------				/**		 * Returns unique <code>PXLoaderLocator</code>.		 * 		 * @return the unique <code>PXLoaderLocator</code>.		 * 		 * @langversion 3.0		 * @playerversion Flash 10		 */				public static function getInstance() : PXLoaderLocator		{			if ( !(_oI is PXLoaderLocator) )			{				_oI = new PXLoaderLocator();			}						return _oI;		}		/**		 * Releases instance.		 * 		 * @langversion 3.0		 * @playerversion Flash 10		 */		public static function release() : void		{			if ( _oI is PXLoaderLocator ) _oI = null;		}		/**		 * Returns <code>PXLoader</code> object registered with passed-in 		 * name identifier.		 * 		 * @return <code>PXLoader</code> object registered with passed-in 		 * name identifier.		 * 		 * @throws 	Error Name is not registered in current locator		 * 					 * @langversion 3.0		 * @playerversion Flash 10		 */		public function getLoader( key : String ) : PXLoader		{			try			{				return locate(key) as PXLoader;			} 			catch ( e : Error )			{				throw new PXNoSuchElementException(".getLoader() " + e.message, this);			}						return null;		}		/**		 * Takes values in Locator and pass them one by one as arguments		 * to a method of an object.		 * 		 * @example		 * <listing>		 * 		 * function changeAlpha( mc : PXGraphicLoader, a : Number, s : Number )		 * {		 *      var dpo : DisplayObject = mc.content as DisplayObject;		 *      dpo.alpha = a;		 * }		 * 		 * myLocator.pixlib_GraphicLoader::batch( changeAlpha, true, 0.5 );		 * </listing>		 *		 * @param	type		PXLoader type filter.		 * @param	f			function to execute on each value stored in the locator.		 * @param	useContent	Use Loader object or its loaded content.		 * @param 	args		additionnal parameters.		 * 		 * @langversion 3.0		 * @playerversion Flash 10		 */		public function batchOnLoader( type : Class, method : Function, useContent : Boolean = false, ...args ) : void		{			super.batch.apply(this, getArguments([getLoaderCollectionByClass(type, useContent), method], args));		}		/**		 * Takes values in Locator and call on each value the method name		 * passed as 1st argument.		 *			 * @param	type		PXLoader type filter.		 * @param	methodName	method name to call on each value stored in the locator.		 * @param	useContent	Use Loader object or its loaded content.		 * @param 	args		additionnal parameters.		 * 		 * @langversion 3.0		 * @playerversion Flash 10		 */		public function callOnLoader( type : Class, methodName : String, useContent : Boolean = false, ...args ) : void		{			super.call.apply(this, getArguments([getLoaderCollectionByClass(type, useContent), methodName], args));		}		/**		 * Returns a collection of all loaders.		 * 		 * @param	useContent	Use loader content or loader instance itself		 * 		 * @example		 * <listing>		 * 		 * var list : Array = PXLoaderLocator.getInstance().getLoaderCollection();		 * </listing>		 * 		 * @langversion 3.0		 * @playerversion Flash 10		 */		public function getLoaderCollection( type : Class = null, useContent : Boolean = false ) : Array		{			return getLoaderCollectionByClass(type, useContent);		}				/**		 * Returns <code>PXCSSLoader</code> object registered with passed-in 		 * name identifier.		 * 		 * @return <code>PXCSSLoader</code> object registered with passed-in 		 * name identifier.		 * 		 * @throws 	Error name is not registered in current locator		 * 					 * @langversion 3.0		 * @playerversion Flash 10		 */		pixlib_CSSLoader function getLoader( name : String ) : PXCSSLoader		{			return PXCSSLoader(getLoader(name));		}				/**		 * Returns <code>PXGraphicLoader</code> object registered with passed-in 		 * name identifier.		 * 		 * @return <code>PXGraphicLoader</code> object registered with passed-in 		 * name identifier.		 * 		 * @throws 	Error name is not registered in current locator		 * 					 * @langversion 3.0		 * @playerversion Flash 10		 */		pixlib_GraphicLoader function getLoader( name : String ) : PXGraphicLoader		{			return PXGraphicLoader(getLoader(name));		}				/**		 * Returns a collection of PXCSSLoader loader		 * 		 * @param	useContent	Use loader content or loader instance itself		 * 		 * @example		 * <listing>		 * 		 * var list : Array = PXLoaderLocator.getInstance().pixlib_CSSLoader::getLoaderCollection();		 * </listing>		 * 		 * @langversion 3.0		 * @playerversion Flash 10		 */		pixlib_CSSLoader function getLoaderCollection( useContent : Boolean = false ) : Array		{			return getLoaderCollectionByClass(PXCSSLoader, useContent);		}				/**		 * Returns a collection of PXGraphicLoader loader		 * 		 * @param	useContent	Use loader content or loader instance itself		 * 		 * @example		 * <listing>		 * 		 * var list : Array = PXLoaderLocator.getInstance().pixlib_GraphicLoader::getLoaderCollection();		 * </listing>		 * 		 * @langversion 3.0		 * @playerversion Flash 10		 */		pixlib_GraphicLoader function getLoaderCollection( useContent : Boolean = false ) : Array		{			return getLoaderCollectionByClass(PXGraphicLoader, useContent);		}				/**		 * Applies a batch process only on PXCSSLoader loaders.		 * 		 * @param	f			function to execute on each value.		 * @param	useContent	Use Loader object or its loaded content.		 * @param 	args		additionnal parameters.		 * 		 * @see	#batch()		 * 		 * @langversion 3.0		 * @playerversion Flash 10		 */		pixlib_CSSLoader function batch( method : Function, useContent : Boolean = false, ...args ) : void		{			batchOnLoader.apply(this, getArguments([PXCSSLoader, method, useContent], args));		}				/**		 * Applies a batch process only on PXGraphicLoader loaders.		 * 		 * @param	f			function to execute on each value.		 * @param	useContent	Use Loader object or its loaded content.		 * @param 	args		additionnal parameters.		 * 		 * @see	#batch()		 * 		 * @langversion 3.0		 * @playerversion Flash 10		 */		pixlib_GraphicLoader function batch( method : Function, useContent : Boolean = false, ...args ) : void		{			batchOnLoader.apply(this, getArguments([PXGraphicLoader, method, useContent], args));		}				/**		 * Calls the call() method only on PXCSSLoader loaders.		 * 		 * @param	methodName	method name to call on each value.		 * @param	useContent	Use Loader object or its loaded content.		 * @param 	args		additionnal parameters.		 * 		 * @see	#call()		 * 		 * @langversion 3.0		 * @playerversion Flash 10		 */		pixlib_CSSLoader function call( methodName : String, useContent : Boolean = false, ...args ) : void		{			callOnLoader.apply(this, getArguments([PXCSSLoader, methodName, useContent], args));		}				/**		 * Calls the call() method only on PXGraphicLoader loaders.		 * 		 * @param	methodName	method name to call on each value.		 * @param	useContent	Use Loader object or its loaded content.		 * @param 	args		additionnal parameters.		 * 		 * @see	#call()		 * 		 * @langversion 3.0		 * @playerversion Flash 10		 */		pixlib_GraphicLoader function call( methodName : String, useContent : Boolean = false, ...args ) : void		{			callOnLoader.apply(this, getArguments([PXGraphicLoader, methodName, useContent], args));		}				/* FileLoader namespace */				/**		 * Returns <code>PXFileLoader</code> object registered with passed-in 		 * name identifier.		 * 		 * @return <code>PXFileLoader</code> object registered with passed-in 		 * name identifier.		 * 		 * @throws 	Error name is not registered in current locator		 * 					 * @langversion 3.0		 * @playerversion Flash 10		 */		pixlib_FileLoader function getLoader( name : String ) : PXFileLoader		{			return PXFileLoader(getLoader(name));		}		/**		 * Returns a collection of PXFileLoader loader		 * 		 * @param	useContent	Use loader content or loader instance itself		 * 		 * @example		 * <listing>		 * 		 * var list : Array = PXLoaderLocator.getInstance().pixlib_FileLoader::getLoaderCollection();		 * </listing>		 * 		 * @langversion 3.0		 * @playerversion Flash 10		 */		pixlib_FileLoader function getLoaderCollection( useContent : Boolean = false ) : Array		{			return getLoaderCollectionByClass(PXFileLoader, useContent);		}		/**		 * Applies a batch process only on PXFileLoader loaders.		 * 		 * @param	f			function to execute on each value stored.		 * @param	useContent	Use Loader object or its loaded content.		 * @param 	args		additionnal parameters.		 * 		 * @see	#batch()		 * 		 * @langversion 3.0		 * @playerversion Flash 10		 */		pixlib_FileLoader function batch( method : Function, useContent : Boolean = false, ...args ) : void		{			batchOnLoader.apply(this, getArguments([PXFileLoader, method, useContent], args));		}		/**		 * Calls the call() method only on PXFileLoader loaders.		 * 		 * @param	methodName	method name to call on each value.		 * @param	useContent	Use Loader object or its loaded content.		 * @param 	args		additionnal parameters.		 * 		 * @see	#call()		 * 		 * @langversion 3.0		 * @playerversion Flash 10		 */		pixlib_FileLoader function call( methodName : String, useContent : Boolean = false, ...args ) : void		{			callOnLoader.apply(this, getArguments([PXFileLoader, methodName, useContent], args));		}				/* XMLLoader namespace */				/**		 * Returns <code>PXXMLLoader</code> object registered with passed-in 		 * name identifier.		 * 		 * @return <code>PXXMLLoader</code> object registered with passed-in 		 * name identifier.		 * 		 * @throws 	Error name is not registered in current locator		 * 					 * @langversion 3.0		 * @playerversion Flash 10		 */		pixlib_XMLLoader function getLoader( name : String ) : PXXMLLoader		{			return PXXMLLoader(getLoader(name));		}		/**		 * Returns a collection of PXXMLLoader loader		 * 		 * @param	useContent	Use loader content or loader instance itself		 * 		 * @example		 * <listing>		 * 		 * var list : Array = PXLoaderLocator.getInstance().pixlib_XMLLoader::getLoaderCollection();		 * </listing>		 * 		 * @langversion 3.0		 * @playerversion Flash 10		 * 		 */		pixlib_XMLLoader function getLoaderCollection( useContent : Boolean ) : Array		{			return getLoaderCollectionByClass(PXXMLLoader, useContent);		}		/**		 * Applies a batch process only on PXXMLLoader loaders.		 * 		 * @param	f			function to execute on each value.		 * @param	useContent	Use Loader object or its loaded content.		 * @param 	args		additionnal parameters.		 * 		 * @see	#batch()		 * 		 * @langversion 3.0		 * @playerversion Flash 10		 */		pixlib_XMLLoader function batch( method : Function, useContent : Boolean = false, ...args ) : void		{			batchOnLoader.apply(this, getArguments([PXXMLLoader, method, useContent], args));		}		/**		 * Calls the call() method only on PXXMLLoader loaders.		 * 		 * @param	methodName	method name to call on each value.		 * @param	useContent	Use Loader object or its loaded content.		 * @param 	args		additionnal parameters.		 * 		 * @see	#call()		 * 		 * @langversion 3.0		 * @playerversion Flash 10		 */		pixlib_XMLLoader function call( methodName : String, useContent : Boolean = false, ...args ) : void		{			callOnLoader.apply(this, getArguments([PXXMLLoader, methodName, useContent], args));		}				/* StreamLoader namespace */				/**		 * Returns <code>PXStreamLoader</code> object registered with passed-in 		 * name identifier.		 * 		 * @return <code>PXStreamLoader</code> object registered with passed-in 		 * name identifier.		 * 		 * @throws 	Error name is not registered in current locator		 * 					 * @langversion 3.0		 * @playerversion Flash 10		 */		pixlib_StreamLoader function getLoader( key : String ) : PXStreamLoader		{			return PXStreamLoader(getLoader(key));		}		/**		 * Returns a collection of PXStreamLoader loader		 * 		 * @param	useContent	Use loader content or loader instance itself		 * 		 * @example		 * <listing>		 * 		 * var list : Array = PXLoaderLocator.getInstance().pixlib_StreamLoader::getLoaderCollection();		 * </listing>		 * 		 * @langversion 3.0		 * @playerversion Flash 10		 */		pixlib_StreamLoader function getLoaderCollection( useContent : Boolean = false ) : Array		{			return getLoaderCollectionByClass(PXStreamLoader, useContent);		}		/**		 * Applies a batch process only on PXStreamLoader loaders.		 * 		 * @param	f			function to execute on each value.		 * @param	useContent	Use Loader object or its loaded content.		 * @param 	args		additionnal parameters.		 * 		 * @see	#batch()		 * 		 * @langversion 3.0		 * @playerversion Flash 10		 */		pixlib_StreamLoader function batch( method : Function, useContent : Boolean = false, ...args ) : void		{			batchOnLoader.apply(this, getArguments([PXStreamLoader, method, useContent], args));		}		/**		 * Calls the call() method only on PXStreamLoader loaders.		 * 		 * @param	methodName	method name to call on each value.		 * @param	useContent	Use Loader object or its loaded content.		 * @param 	args		additionnal parameters.		 * 		 * @see	#call()		 * 		 * @langversion 3.0		 * @playerversion Flash 10		 */		pixlib_StreamLoader function call( methodName : String, useContent : Boolean = false, ...args ) : void		{			callOnLoader.apply(this, getArguments([PXStreamLoader, methodName, useContent], args));		}		/* PluginLoader namespace */				/**		 * Returns <code>PXPluginLoader</code> object registered with passed-in 		 * key identifier.		 * 		 * @return <code>PXPluginLoader</code> object registered with passed-in 		 * key identifier.		 * 		 * @throws 	Error name is not registered in current locator		 * 		 * @langversion 3.0		 * @playerversion Flash 10		 */		pixlib_PluginLoader function getLoader( key : String ) : PXPluginLoader		{			return PXPluginLoader(getLoader(key));		}		/**		 * Returns a collection of PXPluginLoader loaders		 * 		 * @param	useContent	Use loader content or loader instance itself		 * 		 * @example		 * <listing>		 * 		 * var list : Array = PXLoaderLocator.getInstance().pixlib_PluginLoader::getLoaderCollection();		 * </listing>		 * 		 * @langversion 3.0		 * @playerversion Flash 10		 */		pixlib_PluginLoader function getLoaderCollection( useContent : Boolean = false ) : Array		{			return getLoaderCollectionByClass(PXPluginLoader, useContent);		}		/**		 * Applies a batch process only on PXPluginLoader loaders.		 * 		 * @param	f			function to execute on each value.		 * @param	useContent	Use Loader object or its loaded content.		 * @param 	args		additionnal parameters.		 * 		 * @see	#batch()		 * 		 * @langversion 3.0		 * @playerversion Flash 10		 */		pixlib_PluginLoader function batch( method : Function, useContent : Boolean = false, ...args ) : void		{			batchOnLoader.apply(this, getArguments([PXPluginLoader, method, useContent], args));		}		/**		 * Calls the call() method only on PXPluginLoader loaders.		 * 		 * @param	methodName	method name to call on each value.		 * @param	useContent	Use Loader object or its loaded content.		 * @param 	args		additionnal parameters.		 * 		 * @see	#call()		 * 		 * @langversion 3.0		 * @playerversion Flash 10		 */		pixlib_PluginLoader function call( methodName : String, useContent : Boolean = false, ...args ) : void		{			callOnLoader.apply(this, getArguments([PXPluginLoader, methodName, useContent], args));		}				//--------------------------------------------------------------------		// Protected methods		//--------------------------------------------------------------------				/**		 * Returns a collection of registered loader depending of passed-in 		 * value <code>type</code>.		 * 		 * @param	type		Class type filter		 * @param	useContent	Use loader content or loader instance		 * 		 * @langversion 3.0		 * @playerversion Flash 10		 */		protected function getLoaderCollectionByClass( type : Class = null, useContent : Boolean = false ) : Array		{			var arr : Array = new Array();			var val : Object;						if( type == null ) type = PXLoader;						for each (var value : PXLoader in values )			{				val = useContent ? value.content : value;								if( type != null )				{					if( value is type ) arr.push(val);				}			}						return arr;		}		/**		 * @private		 * 		 * @langversion 3.0		 * @playerversion Flash 10		 */		final protected function getArguments( required : Array, optional : Array ) : Array		{			return ( optional.length > 0 ) ? required.concat(optional) : required;		}		/**		 * @inheritDoc		 */		override protected function getLocatorEvent( type : String, key : String = null, o : Object = null ) : PXLocatorEvent		{			return new PXLoaderLocatorEvent(type, this, key, o as PXLoader);		}				//--------------------------------------------------------------------		// Private implementation		//--------------------------------------------------------------------				/** private */		function PXLoaderLocator()		{			super(PXLoader, null);		}	}}internal class ConstructorAccess {	static public const instance : ConstructorAccess = new ConstructorAccess();}