/* * Copyright the original author or authors. *  * Licensed under the MOZILLA PUBLIC LICENSE, Version 1.1 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.mozilla.org/MPL/MPL-1.1.html *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */	 package net.pixlib.utils {	/**	 * The PXNetUtils utility class is an all-static class with methods for 	 * working with URL String.	 * 	 * @langversion 3.0	 * @playerversion Flash 10	 * 	 * @author Romain Ecarnot	 */	final public class PXNetUtils 	{		//--------------------------------------------------------------------		// Public API		//--------------------------------------------------------------------				/**		 * Returns the domain information from the specified URL.		 *  		 * @param url The URL to analyze.		 * 		 * @return The server name and port of the specified URL.		 *  		 * @langversion 3.0		 * @playerversion Flash 10		 */		public static function getFullServerName( url : String ) : String		{			var start : int;			var length : int;						if( getProtocol(url).length > 0 )			{				start = getProtocol(url).length + "://".length;			}			else			{				start = 0;			}						length = url.indexOf("/", start);						return length == -1 ? url.substr(start) : url.substring(start, length);		}		/**		 * Only returns the server name contained in passed-in URL value.		 * 		 * @return the server name contained in passed-in URL value.		 * 		 * @langversion 3.0		 * @playerversion Flash 10		 */		public static function getServerName( url : String ) : String		{			var name : String = getFullServerName(url);			var index : int = name.indexOf(":");						if( index > -1 ) return name.substring(0, index);			else return name;		}		/**		 * Returns used protocol in passed-in <code>url</code>.		 * 		 * @return used protocol in passed-in <code>url</code>.		 * 		 * @langversion 3.0		 * @playerversion Flash 10		 */		public static function getProtocol( url : String ) : String		{			var index : int = url.indexOf("://");						if( index > -1 ) return url.substring(0, index);						return "";		}		/**		 * Replaces and returns current protocol by a new one.		 * 		 * @param url URL to check		 * @param protocol new protocol to replace		 * 		 * @langversion 3.0		 * @playerversion Flash 10		 */		public static function replaceProtocole( url : String, protocol : String ) : String		{			if( getProtocol(url).length > 0 )			{				return url.replace(getProtocol(url), protocol);			}			else return protocol + "://" + url;		}		/**		 * Returns port value contained in passed-in url value.		 * 		 * @return port value contained in passed-in url value.		 * 		 * @langversion 3.0		 * @playerversion Flash 10		 */		public static function getPort( url : String ) : int		{			var name : String = getFullServerName(url);			var index : int = name.indexOf(":");			var port : int = -1;						if( index > -1 )			{				port = parseInt(name.substring(index + 1)); 				if (!isNaN(port)) return port;			}						return port;		}		/**		 * Returns filename contained in passed-in url value.		 * 		 * @return filename contained in passed-in url value.		 * 		 * @langversion 3.0		 * @playerversion Flash 10		 */		public static function getFilename( url : String ) : String		{			return url.substring(url.lastIndexOf("/") + 1, url.indexOf("?") > - 1 ? url.indexOf("?") : 2147483647);		}		/**		 * Returns <code>true</code> if passed-in url value contains http protocol 		 * signature like "http" or "https".		 * 		 * @param url	URL to check		 * @param secured	(optonal) check secured protocol		 * 		 * @return <code>true</code> if passed-in url value contains http protocol 		 * signature like "http" or "https".		 * 		 * @langversion 3.0		 * @playerversion Flash 10		 */		public static function isHTTP( url : String, secured : Boolean = false ) : Boolean		{			if( secured ) return getProtocol(url) == "https";			else			{				return getProtocol(url) == "http" || getProtocol(url) == "https";			}		}		/**		 * @private		 * 		 * @langversion 3.0		 * @playerversion Flash 10		 */		public static function createCleanRelativeURL( baseURL : String, fileURL : String ) : String		{			var absoluteURL : String = fileURL;						if (!(fileURL.indexOf(":") > -1 || fileURL.indexOf("/") == 0 || fileURL.indexOf("\\") == 0))			{				if (baseURL)				{					var lastIndex : int = Math.max(baseURL.lastIndexOf("\\"), baseURL.lastIndexOf("/"));										if (fileURL.indexOf("./") == 0)					{						fileURL = fileURL.substring(2);					}					else					{						while (fileURL.indexOf("../") == 0)						{							fileURL = fileURL.substring(3);							var parentIndex : int = Math.max(baseURL.lastIndexOf("\\", lastIndex - 1), baseURL.lastIndexOf("/", lastIndex - 1));							lastIndex = parentIndex;						}					}                                            					if (lastIndex != -1)                    	absoluteURL = baseURL.substr(0, lastIndex + 1) + fileURL;				}			}						return absoluteURL;		}				//--------------------------------------------------------------------		// Private implementation		//--------------------------------------------------------------------						/**		 * @private		 */		function PXNetUtils(  ) 		{ 			}	}}