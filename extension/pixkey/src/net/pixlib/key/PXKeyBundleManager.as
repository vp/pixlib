/* * Copyright the original author or authors. *  * Licensed under the MOZILLA PUBLIC LICENSE, Version 1.1 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.mozilla.org/MPL/MPL-1.1.html *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package net.pixlib.key{	import net.pixlib.collections.PXHashMap;	import net.pixlib.log.PXDebug;	import net.pixlib.log.PXStringifier;	/**	 * The PXKeyBundleManager class manages PXKeyBundle instances.	 * 	 * @example	 * <listing>	 * 	 * package	 * 	{	 * 		import net.pixlib.commands.PXDelegate;	 * 		import net.pixlib.core.PXBaseDocument;	 * 		import net.pixlib.key.PXKey;	 * 		import net.pixlib.key.PXKeyBundle;	 * 		import net.pixlib.key.PXKeyBundleManager;	 * 		import net.pixlib.key.PXKeyShortcutEvent;	 * 		import net.pixlib.log.PXDebug;	 * 		import net.pixlib.log.PXTraceLayout;	 * 		import net.pixlib.log.addLogListener;	 * 		 * 		public class Sample extends PXBaseDocument	 * 		{	 * 			override protected function onDocumentReady() : void	 * 			{	 * 				addLogListener(PXTraceLayout.getInstance());	 * 		 * 				var userBundle : PXKeyBundle = new PXKeyBundle("UserPanel");	 * 				userBundle.pushCommand(new PXDelegate(_bundleUserHandler), PXKey.O);	 * 				userBundle.pushCommand(new PXDelegate(_bundleUserHandler), PXKey.CONTROL, PXKey.S);	 * 		 * 				var dialogBundle : PXKeyBundle = new PXKeyBundle("Dialog");	 * 				dialogBundle.pushCommand(new PXDelegate(_bundleDialogHandler), PXKey.Y);	 * 				dialogBundle.pushCommand(new PXDelegate(_bundleDialogHandler), PXKey.N);	 * 				dialogBundle.pushCommand(new PXDelegate(_bundleDialogHandler), PXKey.ESCAPE);	 * 		 * 				PXKeyBundleManager.getInstance().mode = PXKeyBundleManager.MULTI_BUNDLE;	 * 				PXKeyBundleManager.getInstance().register(userBundle, true);	 * 				PXKeyBundleManager.getInstance().register(dialogBundle, true);	 * 			}	 * 		 * 			private function _bundleUserHandler(event : PXKeyShortcutEvent) : void	 * 			{	 * 				PXDebug.DEBUG("Activated " + event.shortcut, this);	 * 			}	 * 		 * 			private function _bundleDialogHandler(event : PXKeyShortcutEvent) : void	 * 			{	 * 				PXDebug.DEBUG("Activated " + event.shortcut, this);	 * 			}	 * 		}	 * 	}	 * </listing>	 * 	 * @langversion 3.0	 * @playerversion Flash 10	 * 	 * @author Romain Ecarnot	 */	public class PXKeyBundleManager	{		// --------------------------------------------------------------------		// Constants		// --------------------------------------------------------------------		/** PXKeyBundleManager can only load a unique PXKeyBundle at a time. */		public static const SINGLE_BUNDLE : uint = 0;		/** PXKeyBundleManager can load as many PXKeyBundle we want at the same time. */		public static const MULTI_BUNDLE : uint = 1;		// --------------------------------------------------------------------		// Private properties		// --------------------------------------------------------------------		/** @private */		private static  var _instance : PXKeyBundleManager ;		/** @private */		private var _bundleMap : PXHashMap;		/** @private */		private var _loadingMode : uint;		// --------------------------------------------------------------------		// Public properties		// --------------------------------------------------------------------		/**		 * Manager loading mode.		 * 		 * <p>Value can be : 		 * <ul>		 * 	<li>PXKeyBundleManager.SINGLE_BUNDLE</li>		 * 	<li>PXKeyBundleManager.MULTIPLE_BUNDLE</li>		 * </ul></p>		 * 		 * @langversion 3.0		 * @playerversion Flash 10		 */		public function get mode() : uint		{			return _loadingMode;		}		/** @private */		public function set mode(value : uint) : void		{			if (_loadingMode != value)			{				if (value == SINGLE_BUNDLE)				{					_applyUnicity();				}				_loadingMode = value;			}		}		// --------------------------------------------------------------------		// Public API		// --------------------------------------------------------------------		/**		 * Returns singleton instance of PXKeyBundleManager class.		 * 		 * @return The singleton instance of PXKeyBundleManager class.		 * 		 * @langversion 3.0		 * @playerversion Flash 10		 */		public static function getInstance() : PXKeyBundleManager		{			if (!(_instance is PXKeyBundleManager))				_instance = new PXKeyBundleManager();			return _instance;		}		/**		 * Releases singleton instance.		 * 		 * @langversion 3.0		 * @playerversion Flash 10		 */		public static function release() : void		{			if (_instance is PXKeyBundleManager)			{				_instance._bundleMap.clear();				_instance = null;			}		}		/**		 * Registers passed-in bundle in manager.		 * 		 * @param	bundle 		PXKeyBundle to register		 * @param	autoload	(optional)If <code>true</code>, bundle is loaded		 * 		 * @return <code>true</code> if registration success		 * 		 * @langversion 3.0		 * @playerversion Flash 10			 */		public function register(bundle : PXKeyBundle, autoload : Boolean = false) : Boolean		{			if (!_bundleMap.containsKey(bundle.name))			{				_bundleMap.put(bundle.name, bundle);				if (autoload) load(bundle.name);				return true;			}			else			{				PXDebug.ERROR("A PXKeyBundle named '" + bundle.name + "' already exist.", this);			}			return false;		}		/**		 * Unregisters passed-in bundle from manager.		 * 		 * <p>If bundle was currently loaded, this method unload it first.</p>		 * 		 * @param	bundle 	PXKeyBundle to unregister		 * 		 * @return Unregistered bundle		 * 		 * @langversion 3.0		 * @playerversion Flash 10		 */		public function unregister(bundle : PXKeyBundle) : PXKeyBundle		{			if (_bundleMap.containsKey(bundle.name))			{				unload(bundle.name);				return _bundleMap.remove(bundle.name);			}			else			{				PXDebug.ERROR("PXKeyBundle named '" + bundle.name + "' does not exist.", this);			}			return null;		}		/**		 * Loads bundle registered with passed-in name.		 * 		 * <p>If <code>mode == PXKeyBundleManager.SINGLE</code> then all 		 * others registered bundles are unloaded.</p>		 * 		 * @param bundleName	Name of the bundle to load.		 * 		 * @return <code>true</code> if bundle is successfully loaded		 * 		 * @langversion 3.0		 * @playerversion Flash 10		 */		public function load(bundleName : String) : Boolean		{			if (_bundleMap.containsKey(bundleName))			{				PXKeyBundle(_bundleMap.get(bundleName)).load();				if (mode == SINGLE_BUNDLE)				{					_applyUnicity(bundleName);				}				return true;			}			else			{				PXDebug.ERROR("PXKeyBundle named '" + bundleName + "' does not exist.", this);			}			return false;		}		/**		 * Unloads bundle registered with passed-in name.		 * 		 * @param bundleName	Name of the bundle to unload.		 * 		 * @return <code>true</code> if bundle is successfully unloaded		 * 		 * @langversion 3.0		 * @playerversion Flash 10		 */		public function unload(bundleName : String) : Boolean		{			if (_bundleMap.containsKey(bundleName))			{				PXKeyBundle(_bundleMap.get(bundleName)).unload();				return true;			}			else			{				PXDebug.ERROR("PXKeyBundle named '" + bundleName + "' does not exist.", this);			}			return false;		}		/**		 * Indicates if a bundle named with passed-in name is registered in 		 * manager.		 * 		 * @param bundleName	Name of the bundle to check.		 * 		 * @return <code>true</code> if bundle is registered in manager		 * 		 * @langversion 3.0		 * @playerversion Flash 10		 */		public function isRegistered(bundleName : String) : Boolean		{			return _bundleMap.containsKey(bundleName);		}		/**		 * Returns the bundle instance registered with passed-in name.		 * 		 * @param bundleName	Name of the bundle to retreive.		 * 		 * @return PXKeyBundle if registered or <code>null</code>		 * 		 * @langversion 3.0		 * @playerversion Flash 10		 */		public function locate(bundleName : String) : PXKeyBundle		{			if (isRegistered(bundleName))			{				return _bundleMap.get(bundleName);			}			else			{				PXDebug.ERROR("KeyBundle named '" + bundleName + "' does not exist.", this);			}			return null;		}		/**		 * Returns string representation of instance.		 * 		 * @return The string representation of instance.		 * 		 * @langversion 3.0		 * @playerversion Flash 10		 */		public function toString() : String		{			return PXStringifier.process(this);		}		// --------------------------------------------------------------------		// Private implementation		// --------------------------------------------------------------------		/**		 * @private		 */		function PXKeyBundleManager()		{			_bundleMap = new PXHashMap();			_loadingMode = SINGLE_BUNDLE;		}		/** @private */		private function _applyUnicity(bundleName : String = null) : void		{			var keys : Array = _bundleMap.keys;			var len : uint = keys.length;			for (var i : uint ;i < len; i++)			{				if (bundleName == null || (keys[i] != bundleName)) unload(keys[i]);			}		}	}}