/* * Copyright the original author or authors. *  * Licensed under the MOZILLA PUBLIC LICENSE, Version 1.1 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at *  *      http://www.mozilla.org/MPL/MPL-1.1.html *  * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package net.pixlib.embed {	import flash.system.System;
	import net.pixlib.load.PXResourceLocator;	import flash.utils.ByteArray;	import flash.utils.Dictionary;	import flash.utils.describeType;	/**	 * The PXEmbedEngine class allow to manage your Embeded assets with Pixlib 	 * locator system.	 * 	 * <p>All embeded asset controlled by the PXEmbedEngine are registered 	 * into the Pixlib ResourceLocator locator default singleton.</p>	 * 	 * @example Building your embed assets list	 * <listing>	 * 	 * package test	 * {	 * 	public class EmbedListExample	 * 	{	 * 		[Embed(source="data.xml", mimeType="application/octet-stream")]	 * 		public var DataXML : Class;	 * 			 * 		[Embed(source="avatar.jpg")]	 * 		public var DataJPG : Class;	 * 	}	 * }	 * </listing>	 * 	 * @example Controls embed assets using the PXEmbedEngine	 * <listing>	 * 	 * PXEmbedEngine.addParser("DataXML", PXEmbedEngine.parseXML);	 * PXEmbedEngine.embed(EmbedListExample);	 * </listing>	 * 	 * @example Using Embeded assets in your code	 * <listing>	 * 	 * var logo : DisplayObject = PXResourceLocator.getInstance().locate("DataJPG") as DisplayObject.	 * var xml : XML = PXResourceLocator.getInstance().locateXML("DataXML");	 * </listing>	 * 	 * @see PIXLIB_DOC/net/pixlib/load/PXResourceLocator net.pixlib.load.PXResourceLocator	 * 	 * @langversion 3.0	 * @playerversion Flash 10	 *	 * @author Romain Ecarnot	 */	public class PXEmbedEngine	{		//--------------------------------------------------------------------		// Private properties		//--------------------------------------------------------------------				/**		 * @private		 */		private static var _parser : Dictionary = new Dictionary(true);						//--------------------------------------------------------------------		// Public API		//--------------------------------------------------------------------				/**		 * Releases instance.		 * 		 * @langversion 3.0		 * @playerversion Flash 10		 */		public static function release() : void		{			_parser = null; 		}		/**		 * Adds passed-in method as process to use for variableName parsing.		 * 		 * <p>Uses addParser() method, for example, to parse an XML embed file.</p>		 * 		 * @example		 * <listing>		 * 		 * PXEmbedEngine.addParser("MyXML", PXEmbedEngine.parseXML);		 * PXEmbedEngine.embed(MyEmbedList);		 * </listing>		 *		 * @langversion 3.0		 * @playerversion Flash 10		 */		public static function addParser(variableName : String, parsingMethod : Function) : void
		{
			if (!_parser) _parser = new Dictionary(true);			_parser[variableName] = parsingMethod;		}		/**		 * Checks all <strong>public</strong> properties defined in passed-in 		 * Class and stores embeding result into the default ResourceLocator.		 *		 * @param clazz	Class where public properties are embeded.		 * 		 * @example An Embed assets list		 * <listing>		 * 		 * package		 * {		 * 	public class EmbedList		 * 	{		 * 		[Embed(source="data.xml", mimeType="application/octet-stream")]		 * 		public var DataXML : Class;		 * 				 * 		[Embed(source="avatar.jpg")]		 * 		public var DataJPG : Class;		 * 				 * 		[Embed(source="loop.mp3")]		 * 		public var DataMP3 : Class;		 * 	}		 * }		 * </listing>		 * 		 * @langversion 3.0		 * @playerversion Flash 10		 */		public static function embed(clazz : Class) : void		{			var o : Object = new clazz();			var xml : XML = describeType(o);			var varName : String;			var rawData : *;						for each (var variable : XML in xml.variable) 			{				varName = variable.@name.toString();				rawData = new o[varName]();				
				if (_parser && _parser[varName] != null)				{					rawData = _parser[varName](rawData);				}								PXResourceLocator.getInstance().register(varName, rawData);			}						o = null;						System.disposeXML(xml);			xml = null;		}		/**		 * Parses an XML Embed data.		 * 		 * <p>You this method when you want to embed XML file because XML data 		 * are not automatically transformed into concrete XML instance type.</p>		 * 		 * @example		 * <listing>		 * 		 * PXEmbedEngine.addParser("MyXML", PXEmbedEngine.parseXML);		 * PXEmbedEngine.embed(MyEmbedList);		 * </listing>		 * 		 * @param source	Here a ByteArray coming from embeding result. But you can 		 * 					create your own parser using a less type argument if 		 * 					you don't really know the embeding result type.		 * 		 * @langversion 3.0		 * @playerversion Flash 10		 */		public static function parseXML(source : ByteArray) : XML		{			return new XML(source.readUTFBytes(source.length));		}				//--------------------------------------------------------------------		// Private implementation		//--------------------------------------------------------------------						/**		 * @private		 */		function PXEmbedEngine()		{		}	}}